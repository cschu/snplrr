#!/usr/bin/env python

import os
import sys
import time
import datetime

try:
    import argparse
except:
    sys.stderr.write('TESTEXIT.\n')
    sys.exit(0)


import vcf

GTYPE_HOMOZYGOUS_REF = 1
GTYPE_HOMOZYGOUS_ALT = 2
GTYPE_HETEROZYGOUS = 4
GTYPE_UNKNOWN = 8

GENOTYPES = {'0/0': GTYPE_HOMOZYGOUS_REF,
             '1/1': GTYPE_HOMOZYGOUS_ALT,
             '0/1': GTYPE_HETEROZYGOUS}

logfile = None

def anabl_getSeqsFromFASTA(fn):
    """
    Returns generator object to access sequences from a multi-FASTA file.
    Originates from 'anabl' - BLAST analysing tool, hence the prefix.
    """
    head, seq = None, ''
    for line in open(fn):
        if line[0] == '>':
            if head is not None:
                yield (head, seq) 
            head, seq = line.strip().strip('>'), ''
        else:
            seq += line.strip()
    yield (head, seq)

def getSNPPositions(vcf_handle, crit=None, sample='Sample1'):
    """ 
    Returns all variant positions according to the filter criteria.
    """
    positions = set()
    for record in vcf_handle:        
        genotype = GENOTYPES.get(record.genotype(sample).data[0], 
                                 GTYPE_UNKNOWN)
        if (genotype & crit) == crit:
            key = (record.CHROM, record.POS)
            positions.add(key)
    return positions

def getSNPPositionsFast(vcf_handle, crit=None, sample='Sample1'):
    return set(((record.CHROM, record.POS, record.genotype(sample).data[0]) for record in vcf_handle if (GENOTYPES.get(record.genotype(sample).data[0], GTYPE_UNKNOWN) & crit) == crit))

def readVCFQuick(fn, crit=0):
    """
    Returns dictionary over all variant positions: {(contig, pos): (count, baseCall)}
    """
    for line in open(fn):
        if line.startswith('#'): continue
        line = line.strip().split()
        if line[6].strip() != 'PASS': continue
        contig, pos = line[:2]
        baseCall = line[4] 
        genotype_fields = line[9].split(':') 
        if (GENOTYPES.get(genotype_fields[0], GTYPE_UNKNOWN) & crit) == crit:
            yield ((contig, pos), (int(genotype_fields[3]), baseCall))
    pass


def getSequenceLengths(fn):
    """
    Returns sequence lengths from a FastX file
    """ 
    return dict([(head, len(seq)) 
                 for head, seq in anabl_getSeqsFromFASTA(fn)])

def getAverageSNPCoverage(SNPpos, contigLengths):
    coverage = dict([(cid, []) for cid in contigLengths]) 
    for snp in SNPpos:
        coverage[snp[0]].append(SNPpos[snp][0])
    for contig in coverage:
        if coverage[contig]:
            coverage[contig] = sum(coverage[contig])/float(len(coverage[contig]))
        else:
            coverage[contig] = 0
    return coverage

def getAverageContigCoverage(fn, contigLengths):
    """
    Returns the average read coverage for a contig
    """
    coverage = dict([(cid, 0.0) for cid in contigLengths])
    for line in open(fn):
        line = line.strip().split()
        coverage[line[0]] += int(line[3])
    for cid in coverage:
        coverage[cid] = coverage[cid] / contigLengths[cid]

    return coverage

def getAverageContigCoverageQuick(fn, contigLengths):
    coverage = {}
    currentContig, count = None, 0
    for line in open(fn):
        line = line.strip().split()
        if line[0] != currentContig:
            if currentContig is not None:
                coverage[currentContig] = float(count) / contigLengths[currentContig]
            currentContig, count = line[0], 0
        count += int(line[3])
    coverage[currentContig] = float(count) / contigLengths[currentContig]
    return coverage
    
        
def countSNPsPerContig(positions):
    snpCount = {}
    for pos in positions:
        snpCount[pos[0]] = snpCount.get(pos[0], 0) + 1
    return snpCount

def getTimeDelta(t):
    now = time.time()
    return now - t, now


def run_snplrr(refcontigs, contigSummary, snpTable,
               controlMP, controlVCF, susP_vs_resMP, 
               susP_vs_resVCF, susBulk_vs_resMP, susBulk_vs_resVCF):

    global logfile

    logfile.write('Getting contig lengths...')
    logfile.flush()
    tstamp = time.time()
    seqLengths = getSequenceLengths(refcontigs)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    # sys.exit()

    logfile.write('Reading SNP data from VCF1...')
    logfile.flush()
    tstamp = time.time()
    #controlSNPs = getSNPPositionsFast(vcf.Reader(open(controlVCF)),
    #                                  crit=GTYPE_HOMOZYGOUS_ALT|GTYPE_HETEROZYGOUS)
    # current analysis requires different behaviour
    # since reference sequence is from different cultivar
    # crit=GTYPE_HOMOZYGOUS_ALT|GTYPE_HETEROZYGOUS 
    crit=GTYPE_HOMOZYGOUS_ALT|GTYPE_HOMOZYGOUS_REF
    controlSNPs_d = dict(readVCFQuick(controlVCF, crit=crit))
    controlSNPs = set(controlSNPs_d)
                                      
  
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    
    logfile.write('Reading SNP data from VCF2...')
    logfile.flush()
    tstamp = time.time()
    crit=GTYPE_HOMOZYGOUS_ALT 
    #susPSNPs = getSNPPositionsFast(vcf.Reader(open(susP_vs_resVCF)),
    #                               crit=crit)
    susPSNPs_d = dict(readVCFQuick(susP_vs_resVCF, crit=crit))
    susPSNPs = set(susPSNPs_d)

    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))

    logfile.write('Reading SNP data from VCF3...')
    logfile.flush()
    tstamp = time.time()
    #susBulkSNPs = getSNPPositionsFast(vcf.Reader(open(susBulk_vs_resVCF)),
    #                                  crit=crit)
    susBulkSNPs_d = dict(readVCFQuick(susBulk_vs_resVCF, crit=crit))
    susBulkSNPs = set(susBulkSNPs_d)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))

    #logfile.write('Calculating average contig coverage...')
    #logfile.flush()
    #tstamp = time.time()
    #coverage_susP = getAverageContigCoverageQuick(susP_vs_resMP, seqLengths)    
    #coverage_susBulk = getAverageContigCoverageQuick(susBulk_vs_resMP, seqLengths)
    #logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    # logfile.write('%s\n' % str(susPSNPs_d))
    # logfile.write('%s\n' % str(seqLengths))

    logfile.write('Calculating SNP coverage/contig...')
    logfile.flush()
    tstamp = time.time()
    coverage_susP = getAverageSNPCoverage(susPSNPs_d, seqLengths)
    coverage_susBulk = getAverageSNPCoverage(susBulkSNPs_d, seqLengths)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    
    logfile.write('Counting SNPs per contig...')
    logfile.flush()
    tstamp = time.time()
    snpCount_susP = countSNPsPerContig(susPSNPs)
    snpCount_susBulk = countSNPsPerContig(susBulkSNPs)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    
    # first step
    # any position in the control set that shows a variant
    # cannot be reliably used
    # remove those positions from the susceptible sets
    """
    # ignore step in current analysis, where reference is 
    # different cultivar
    logfile.write('Getting rid off variant positions in reference...')
    logfile.flush()
    tstamp = time.time()
    susPSNPs.difference_update(controlSNPs)
    susBulkSNPs.difference_update(controlSNPs)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    """
    #logfile.write('Getting rid off heterozygous positions in resP...')
    #logfile.flush()
    #tstamp = time.time()
    

    # second step
    # all homozygous SNPs that are common between susceptible parents
    # and bulk may indicate NB-LRR contigs
    logfile.write('Finding common SNPs between susP and susBulk...')
    logfile.flush()
    tstamp = time.time()
    commonSusSNPs = susPSNPs.intersection(susBulkSNPs)
    snpCount_common = countSNPsPerContig(commonSusSNPs)
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))

    # third step
    # take all contigs that contain exclusively common bulk/susP SNPs 
    # and no non-shared SNPs
    logfile.write('Gathering non-chimeric contigs...')
    logfile.flush()
    tstamp = time.time()
    susPOnlySNPs = susPSNPs.difference(susBulkSNPs)
    susPOnlyContigs = set([x[0] for x in susPOnlySNPs])
    
    commonSusContigs = set([x[0] for x in commonSusSNPs])
    susHomocontigs = commonSusContigs.difference(susPOnlyContigs)
   
    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))

    logfile.write('commonSusSNPs: %i\n' % len(commonSusSNPs))
    logfile.write('commonSusContigs: %i\n' % len(commonSusContigs))
    logfile.write('susPOnlySNPs: %i\n' % len(susPOnlySNPs))
    logfile.write('susPOnlyContigs: %i\n' % len(susPOnlyContigs))
    logfile.write('susHomocontigs: %i\n' % len(susHomocontigs))

    logfile.write('Writing contig information...')
    logfile.flush()
    tstamp = time.time()
    out_contigSummary = open(contigSummary, 'wb')
    header = ['contig', 'length', 
              'avg(coverage, susP)', 'avg(coverage, susBulk)',
              '#SNPs(susP)', '#SNPs(susBulk)', '#SNPs(common)',
              'SNP_freq(susP)', 'SNP_freq(susBulk)', 'SNP_freq(common)']
    out_contigSummary.write('\t'.join(header) + '\n')





    for contig in sorted(susHomocontigs):
        row = [contig, seqLengths.get(contig, 0), 
               '%.3f' % coverage_susP.get(contig, 0), 
               '%.3f' % coverage_susBulk.get(contig, 0),
               int(snpCount_susP.get(contig, 0)),
               int(snpCount_susBulk.get(contig, 0)),
               int(snpCount_common.get(contig, 0))]
        if row[1] == 0:
            row.extend(['N/A', 'N/A', 'N/A'])
        else:
            row.extend(['%.3f' % (row[-3]/float(row[1])),
                        '%.3f' % (row[-2]/float(row[1])),
                        '%.3f' % (row[-1]/float(row[1]))])
        row[4:7] = map(lambda x:'%.3f'%x, row[4:7])
        out_contigSummary.write('\t'.join(map(str, row)) + '\n')
    out_contigSummary.close()

    out_snpTable = open(snpTable, 'wb')
    header = ['contig', 'pos', 
              'resP/Ref:base', 'resP/Ref:coverage', 
              'susP/Ref:base', 'susP/Ref:coverage',  
              'susBulk/Ref:base','susBulk/Ref:coverage',
              'susP identical to susBulk?'] 
    out_snpTable.write('\t'.join(header) + '\n')

    NA = ('NA', 'NA')
    for contig, pos in sorted(commonSusSNPs, key=lambda x:(x[0],int(x[1]))):
        row = [contig, pos,] + \
               (list(reversed(controlSNPs_d.get((contig, pos), NA)))) + \
               (list(reversed(susPSNPs_d.get((contig, pos), NA)))) + \
               (list(reversed(susBulkSNPs_d.get((contig, pos), NA)))) 
        row.append('YES' if row[-2] == row[-4] else 'NO')
        out_snpTable.write('\t'.join(map(str, row)) + '\n')
    out_snpTable.close()

    logfile.write(' %is\n' % int((time.time() - tstamp) + 0.5))
    pass


def main(argv):

    #open(argv[-1], 'wb').write(str(sys.version) + '\n')
    #sys.exit(0)

    descr = ''
    parser = argparse.ArgumentParser(description=descr)
    parser.add_argument('--refcontigs', help='Fasta file with reference sequences against which SNPs are called.')
    parser.add_argument('--controlMP', help='Mpileup pileup file of resistant parent reads against reference (control data)')
    parser.add_argument('--controlVCF', help='VCF file of resistant parent reads against reference (control data)')
    parser.add_argument('--susP-vs-resMP', help='Mpileup pileup file of susceptible parent reads against reference')
    parser.add_argument('--susP-vs-resVCF', help='VCF file of susceptible parent reads against reference')
    parser.add_argument('--susBulk-vs-resMP', help='Mpileup pileup file of susceptible bulk reads against reference')
    parser.add_argument('--susBulk-vs-resVCF', help='VCF file of susceptible bulk reads against reference')
    parser.add_argument('--contig-summary', help='Contig summary (tabular).')
    parser.add_argument('--snp-table', help='SNP table.')
    parser.add_argument('--logfile', help='A log file.', default='snplrr.log')
    

    args = parser.parse_args()

    try:
        input = [args.refcontigs, args.contig_summary, args.snp_table,
                 args.controlMP, args.controlVCF,
                 args.susP_vs_resMP, args.susP_vs_resVCF,
                 args.susBulk_vs_resMP, args.susBulk_vs_resVCF]
    except:
        sys.stderr.write('Error: Invalid input parameters.\n')
        sys.exit(1)

    # test = vcf.Reader(open(args.controlVCF))
    global logfile 
    logfile = open(args.logfile, 'wb')
    logfile.write(str(input) + '\n')
    #logfile.close()
    #sys.exit()
    run_snplrr(args.refcontigs, args.contig_summary, args.snp_table,
               args.controlMP, args.controlVCF, args.susP_vs_resMP,
               args.susP_vs_resVCF, args.susBulk_vs_resMP, args.susBulk_vs_resVCF)
    logfile.close()

    pass



if __name__ == '__main__': main(sys.argv[1:])
